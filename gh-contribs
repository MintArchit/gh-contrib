#!/usr/bin/env bash
set -e    #exit on error for each command
#set -x
#trap read debug

main()
{
  # global variables
  weeks_max=52
  weeks_min=0
  weeks="$(($weeks_max-weeks_min))"
  week_labels=("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat")
  style=contrast
  vsep=""
  hsep="\n"

  # boolean
  labels=1
  nodouble=1
  #echo "main is running"
  parse_args "$@"
  #echo "p_args is running"
  parse_style
  #echo "p_style is running"

  # local variables
  local width="$(calculate_output $weeks)"
  
  # gh api
  days=( $(gh api graphql -f query='{
    viewer {
      contributionsCollection {
        contributionCalendar {
          weeks {
            contributionDays {
              color
            }
          }
        }
      }
    }
  }' --jq '..|.color?' | grep .) )
  #}' --cache 24h --jq '..|.color?' | grep .) )

  #Automatic size
  #1. Calc Output_width
  #2. Check Output_width < Terminal_size
  #3. Reaction:
    #- ignore request, and output error message
    #- Force capable width

  if [ -t 1 ] && [ "$(tput cols)" -lt "$width" ] || [ $nodouble -eq 0 ]; then
    print_graph_landscape 0
  else
    if [ -z "$vsep" ]; then
      print_graph_landscape 1
    else
      print_graph_landscape 0
    fi
  fi

  #printf "weeks: $weeks, w-min: $weeks_min, w-max: $weeks_max \n"
}

parse_args() 
{
  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--style)
        style="$2"
        [ -z $2 ] && h_styles >&2 && exit 1
        shift 2;;
      -w|--weeks)
        weeks="$2"
        weeks_min="$(($weeks_max-weeks))"
        #let weeks_min=weeks_max-weeks
        #echo $weeks_min
        [ -z $2 ] && echo "error" >&2 && exit 1
        shift 2;;
      -x|--xgap)
        vsep=" "
        shift 1;;
      -y|--ygap)
        hsep="\n\n"
        shift 1;;
      -xy|-yx)
        vsep=" "
        hsep="\n\n"
        shift 1;;
      -n|--no-doubles)
        nodouble=0
        shift 1;;
      -l|--labels)
        labels=0
        shift 1;;
      -h|--help)
        h_usage >&2
        h_options >&2
        h_styles >&2
        exit 0;;
      *)
        h_usage >&2
        h_error >&2
        exit 1;;
    esac
  done
  return 0
}

parse_style ()
{
  case "$style" in
    block)
      block_full="█"
      block_empty="$block_full";;
    square)
      block_full="◼︎"
      block_empty="$block_full";;
    dot)
      block_full="•"
      block_empty="$block_full";;
    shade)
      block_full="▒"
      block_empty="░";;
    fisheye)
      block_full="◉"
      block_empty="●";;
    diamond)
      block_full="♦︎"
      block_empty="$block_full";;
    plus)
      block_full="✚"
      block_empty="•";;
    contrast)
      block_full="█"
      block_empty="░";;
    *)
      echo "error: style '$style' not recognized" >&2
      h_styles >&2
      exit 1;;
  esac
  return 0
}

print_graph_landscape () 
{
  #printf "\nUsed function\n\n"
  for d in $(seq 0 6); do
    [ $labels -eq 0 ] && printf "%s${week_labels[$d]} "
    for w in $(seq $weeks_min $weeks_max); do
      hex="${days[w*7+d]}"
      for i in $(seq 0 $1);do
        [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")"  "$vsep"
      done
    done
    printf "$hsep"
  done
  printf "\n"
  return 0
}

calculate_output()
{
  printf "$(($1*2))" # times 2 due to doubling
}

char() 
{
  if [ "$1" = "#ebedf0" ]; then
    echo "$block_empty"
  else
    echo "$block_full"
  fi
  return 0
}

# help msgs
h_usage() 
{
  printf "Usage: gh contribs -s <style> -w <weeks> -x -y -n -h\n\n"
  return 0
}

h_error() 
{
  printf "Error: Invalid input!\n\n"
  return 0
}

h_warning() 
{
  printf "Warning: Terminal too thin, (-x --xgap) ignored!\n"
  return 0
}

h_options() 
{
  printf "Options:\n\t-h | --help\n\t-s | --style <style>\n\t-w | --weeks <weeks>\n\t-x | --xgap\n\t-y | --ygap\n\n-n | --no-doubles\n\n"
  return 0
}

h_styles() 
{
  printf "Styles:\nblock square dot shade fisheye diamond plus contrast\n"
  return 0
}

main "$@"
