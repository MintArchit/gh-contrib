#!/usr/bin/env bash
set -e

# help msgs
h_usage() {
  printf "Usage: gh contribs -s <style> -w <weeks> -x -y -n -h\n\n"
}

h_error() {
  printf "Error: Invalid input!\n\n"
}

h_warning() {
  printf "Warning: Terminal too thin, (-x --xgap) ignored!\n"
}

h_options() {
  printf "Options:\n\t-h | --help\n\t-s | --style <style>\n\t-w | --weeks <weeks>\n\t-x | --xgap\n\t-y | --ygap\n\n-n | --no-doubles\n\n"
}

h_styles() {
  printf "Styles:\nblock square dot shade fisheye diamond plus contrast\n"
}


# variables defaults
weeks=0
weeks_max=52
weeks_min=0
style=contrast
nodouble=0
vsep=""
hsep="\n"


# parse options
while [ $# -gt 0 ]; do
  case "$1" in
    -s|--style)
      style="$2"
      [ -z $2 ] && h_styles >&2 && exit 1
      shift 2
      ;;
    -w|--weeks)
      weeks="$2"
      let weeks_min=weeks_max-weeks
      #echo $weeks_min
      [ -z $2 ] && echo "error" >&2 && exit 1
      shift 2
      ;;
    -x|--xgap)
      vsep=" "
      shift 1
      ;;
    -y|--ygap)
      hsep="\n\n"
      shift 1
      ;;
    -xy|-yx)
      vsep=" "
      hsep="\n\n"
      shift 1
      ;;
    -n|--no-doubles)
      nodouble=1
      shift 1
      ;;
    -h|--help)
      h_usage >&2
      h_options >&2
      h_styles >&2
      exit 0
      ;;
    *)
      h_usage >&2
      h_error >&2
      exit 1
      ;;
  esac
done

# parse style
case "$style" in
block)
  block_full="█"
  block_empty="$block_full";;
square)
  block_full="◼︎"
  block_empty="$block_full";;
dot)
  block_full="•"
  block_empty="$block_full";;
shade)
  block_full="▒"
  block_empty="░";;
fisheye)
  block_full="◉"
  block_empty="●";;
diamond)
  block_full="♦︎"
  block_empty="$block_full";;
plus)
  block_full="✚"
  block_empty="•";;
contrast)
  block_full="█"
  block_empty="░";;
*)
  echo "error: style '$style' not recognized" >&2
  h_styles >&2
  exit 1;;
esac

char() {
  if [ "$1" = "#ebedf0" ]; then
    echo "$block_empty"
  else
    echo "$block_full"
  fi
}

days=( $(gh api graphql -f query='{
  viewer {
    contributionsCollection {
      contributionCalendar {
        weeks {
          contributionDays {
            color
          }
        }
      }
    }
  }
}' --jq '..|.color?' | grep .) )
#}' --cache 24h --jq '..|.color?' | grep .) )

if [ -t 1 ] && [ "$(tput cols)" -lt 102 ] || [ $nodouble -eq 1 ]; then
 if [ ! -z "$vsep" ]; then
	 h_warning
 fi
 for d in $(seq 0 6); do
   for w in $(seq $weeks_min $weeks_max); do
     hex="${days[w*7+d]}"
     [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")"
   done
   printf "$hsep"
 done
 printf "\n"
else
 if [ -z "$vsep" ]; then
  for d in $(seq 0 6); do
    for w in $(seq $weeks_min $weeks_max); do
      hex="${days[w*7+d]}"
      #printf $hex
      [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")"
      [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")"
    done
    printf "$hsep"
  done
  printf "\n"
 else
  for d in $(seq 0 6); do
    for w in $(seq $weeks_min $weeks_max); do
      hex="${days[w*7+d]}"
      [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")" "$vsep"
    done
    printf "$hsep"
  done
  printf "\n"
 fi
fi
