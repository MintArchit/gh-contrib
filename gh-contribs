#!/usr/bin/env bash
# debug settings
set -e    #exit on error for each command
#set -x
#trap read debug

main()
{
  # global variables
  weeks_max=52
  weeks_min=0
  weeks="$(($weeks_max-weeks_min))"
  week_labels=("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat")
  style=contrast
  xgap=""
  ygap="\n"

  # boolean
  portrait=1
  labels=1
  nodouble=1
  debug=1
  warning=0

  #echo "main is running"
  parse_args "$@"
  #echo "p_args is running"
  parse_style
  #echo "p_style is running"

  # local variables
  local output_width="$(calculate_output_width $weeks)"
  local terminal_width="$(tput cols)"
  
  local wdouble=2
  local wlabel=0
  local wxgap=1
  [ $nodouble -eq 0 ] && wdouble=1
  [ $labels -eq 0 ] && wlabel=4
  [ -z "$xgap" ] && wxgap=0
  [ $debug -eq 0 ] && printf "
  weeks: $weeks
  double: $wdouble
  wxgap: $wxgap
  wlabel: $wlabel
  ((weeks*(wdouble+wxgap)+wlabel+2))
  \n" 


  # gh api
  days=( $(gh api graphql -f query='{
    viewer {
      contributionsCollection {
        contributionCalendar {
          weeks {
            contributionDays {
              color
            }
          }
        }
      }
    }
  }' --jq '..|.color?' | grep .) )
  #}' --cache 24h --jq '..|.color?' | grep .) )

  [ $debug -eq 0 ] && printf "terminal: $terminal_width, calculated-output: $output_width\n"

  force=1
  # automatic resizing
  if [ $terminal_width -lt "$output_width" ] && [ $force -eq 1 ] && [ $portrait -eq 1 ]; then    # t < O
    # adjust weeks
    # x=83-2-4/(2+1)
    #cstep1="$((terminal_width-2-wlabel))"
    #cstep2="$(((wdouble+wxgaps)))"
    #printf "weeks = $cstep1 / $cstep2 \n"
    #local output_width="$(calculate_output_width $weeks)"
    #printf "$output_width\n"
    weeks="$(((terminal_width-wdouble-wxgap-wlabel)/(wdouble+wxgap)))"
    weeks_min="$((weeks_max-weeks))"
    [ $warning -eq 0 ] && printf "exceeding terminal_width, resizing to $weeks weeks\n"
  fi
  [ $nodouble -eq 0 ] && print_graph 0 || print_graph 1

  [ $debug -eq 0 ] && printf "weeks: $weeks, w-min: $weeks_min, w-max: $weeks_max \n"
}

parse_args()
{
  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--style)
        style="$2"
        [ -z $2 ] && h_styles >&2 && exit 1
        shift 2;;
      -w|--weeks)
        weeks="$2"
        weeks_min="$(($weeks_max-weeks))"
        #let weeks_min=weeks_max-weeks
        #echo $weeks_min
        [ -z $2 ] && echo "error" >&2 && exit 1
        shift 2;;
      -x|--xgap)
        xgap=" "
        shift 1;;
      -y|--ygap)
        ygap="\n\n"
        shift 1;;
      -xy|-yx)
        xgap=" "
        ygap="\n\n"
        shift 1;;
      -n|--no-doubles)
        nodouble=0
        shift 1;;
      -l|--labels)
        labels=0
        shift 1;;
      -p|--portrait)
        portrait=0
        shift 1;;
      -d|--debug)
        debug=0
        shift 1;;
      -W|--warning)
        warning=1
        shift 1;;
      -h|--help)
        h_usage >&2
        h_args >&2
        h_styles >&2
        exit 0;;
      *)
        h_usage >&2
        h_error >&2
        exit 1;;
    esac
  done
  return 0
}

parse_style()
{
  case "$style" in
    block)
      block_full="█"
      block_empty="$block_full";;
    square)
      block_full="◼︎"
      block_empty="$block_full";;
    dot)
      block_full="•"
      block_empty="$block_full";;
    shade)
      block_full="▒"
      block_empty="░";;
    fisheye)
      block_full="◉"
      block_empty="●";;
    diamond)
      block_full="♦︎"
      block_empty="$block_full";;
    plus)
      block_full="✚"
      block_empty="•";;
    contrast)
      block_full="█"
      block_empty="░";;
    *)
      echo "error: style '$style' not recognized" >&2
      h_styles >&2
      exit 1;;
  esac
  return 0
}

print_graph()
{
  if [[ $portrait -eq 0 ]]; then
    print_graph_portrait $1
  else
    print_graph_landscape $1
  fi
}

print_graph_landscape()
{
  #printf "\nUsed function\n\n"
  for d in $(seq 0 6); do
    [ $labels -eq 0 ] && printf "%s${week_labels[$d]} "
    for w in $(seq $weeks_min $weeks_max); do
      print_graph_cmd $1
      #print_debug_graph_cmd $1
    done
    printf "$ygap"
  done
  printf "\n"
  return 0
}

print_graph_portrait()
{
  #printf "\nUsed function\n\n"
  for w in $(seq $weeks_min $weeks_max); do
    for d in $(seq 0 6); do
      print_graph_cmd $1
    done
    printf "$ygap"
  done
  printf "\n"

  return 0
}

print_graph_cmd()
{
  hex="${days[w*7+d]}"
  for i in $(seq 0 $1);do
    [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")"
  done
  [ ! -z "$hex" ] && printf "$xgap"

  return 0
}

print_debug_graph_cmd()
{
  hex="${days[w*7+d]}"
  for i in $(seq 0 $1);do
    [ ! -z "$hex" ] && printf "\e[38;2;%d;%d;%dm%s\e[m%s" "$((16#${hex:1:2}))" "$((16#${hex:3:2}))" "$((16#${hex:5:2}))" "$(char "$hex")"
  done

  [ ! -z "$hex" ] && printf " $((16#${hex:1:2})) $((16#${hex:3:2})) $((16#${hex:5:2})) " "$(char "$hex")" "\n"
  return 0
}

calculate_output_width()
{
  #calclogic
  #x=weeks*(wdouble+wxgaps)+wlabel+2
  #(x-2-wlabel)/(wdouble+wxgaps)=weeks
  local wdouble=2
  local wlabel=0
  local wxgap=1
  [ $nodouble -eq 0 ] && wdouble=1
  [ $labels -eq 0 ] && wlabel=4
  [ -z "$xgap" ] && wxgap=0
  #printf "$(($1*(wdouble+wxgap)+wlabel+2))" 
  printf "$(($1*(wdouble+wxgap)+wlabel+wdouble+wgap))" 
}

char()
{
  if [ "$1" = "#ebedf0" ]; then
    echo "$block_empty"
  else
    echo "$block_full"
  fi
  return 0
}

# msgs
h_usage()
{
  printf "Usage: gh contribs [-h] [-s <style>] [-w <weeks>] [-x] [-y] [-n] [-l] [-p] [-d] [-W]\n\n"
  return 0
}

h_error()
{
  printf "Error: Invalid input!\n\n"
  return 0
}

h_warning()
{
  printf "Warning: Terminal too thin, (-x --xgap) ignored!\n"
  return 0
}

h_args()
{
  printf "Arguments:

  -h | --help             Displays this help.
  -s | --style <style>    Change Character
  -w | --weeks <weeks>    Set range of weeks to be displayed
  -x | --xgap             Put a Gap between each Column
  -y | --ygap             Put a Gap between each Row
  -n | --no-doubles       Disable Automatic Char Doubling
  -l | --labels           Enable Labels
  -p | --portrait         Set Output Orientation
  -d | --debug            Enable additional debug output
  -W | --warning          Disable warning output
  \n"
  return 0
}

h_styles()
{
  printf "Styles:\nblock square dot shade fisheye diamond plus contrast\n"
  return 0
}

main "$@"
